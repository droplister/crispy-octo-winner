{"version":3,"sources":["../../src/auth/auth.js"],"names":["passport","use","localStrategy","Strategy","usernameField","passwordField","passReqToCallback","req","email","password","done","username","body","UserModel","findOne","searchUser","Error","create","user","isValidPassword","valid","JwtStrategy","secretOrKey","process","env","JWT_SECRET","jwtFromRequest","token","cookies","jwt"],"mappings":"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","sourcesContent":["import passport from 'passport';\nimport localStrategy from 'passport-local';\nimport JwtStrategy from 'passport-jwt';\nimport UserModel from '../models/UserModel';\n\n// passport.use(passport.initialize());\n// passport.use(passport.session());\npassport.use('signup', new localStrategy.Strategy({\n  usernameField: 'email',\n  passwordField: 'password',\n  passReqToCallback: true,\n}, async (req, email, password, done) => {\n  try {\n    const { username } = req.body;\n    const searchUser = await UserModel.findOne({ username });\n    if (searchUser) {\n      return done(new Error(`username ${username} taken`));\n    }\n    const user = await UserModel.create({ email, password, username });\n\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n}));\n\npassport.use('login', new localStrategy.Strategy({\n  usernameField: 'email',\n  passwordField: 'password',\n}, async (email, password, done) => {\n  try {\n    // since email is unique this should only bring back one email\n    const user = await UserModel.findOne({ email });\n    if (!user) {\n      return done(new Error('User not found'), false);\n    }\n    const valid = await user.isValidPassword(password);\n    if (!valid) {\n      return done(new Error('Invalid Password'), false);\n    }\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n}));\n\n// verify JWT token\npassport.use(\n  new JwtStrategy.Strategy({\n    secretOrKey: process.env.JWT_SECRET,\n    jwtFromRequest: (req) => {\n      let token = null;\n      if (req && req.cookies) {\n        token = req.cookies.jwt;\n      }\n      return token;\n    },\n  },\n  async (token, done) => {\n    try {\n      return done(null, token.user);\n    } catch (err) {\n      return done(err);\n    }\n  }),\n);\n"],"file":"auth.js"}