{"version":3,"sources":["../../src/models/UserModel.js"],"names":["Schema","mongoose","UserSchema","email","type","String","required","unique","lowercase","trim","password","username","resetToken","resetTokenExp","Date","pre","next","bcrypt","hash","methods","isValidPassword","user","compare","UserModel","model"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAFA;IAIQA,M,GAAWC,oB,CAAXD,M;AAER,IAAME,UAAU,GAAG,IAAIF,MAAJ,CAAW;AAC5BG,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,SAAS,EAAE,IAJN;AAKLC,IAAAA,IAAI,EAAE;AALD,GADqB;AAQ5BC,EAAAA,QAAQ,EAAE;AACRN,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GARkB;AAY5BK,EAAAA,QAAQ,EAAE;AACRP,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAEQ;AAChBE,IAAAA,SAAS,EAAE,IAHH;AAIRC,IAAAA,IAAI,EAAE;AAJE,GAZkB;AAkB5BG,EAAAA,UAAU,EAAE;AACVR,IAAAA,IAAI,EAAEC;AADI,GAlBgB;AAqB5BQ,EAAAA,aAAa,EAAE;AACbT,IAAAA,IAAI,EAAEU;AADO;AArBa,CAAX,CAAnB;AA0BAZ,UAAU,CAACa,GAAX,CAAe,MAAf;AAAA,2FAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFC,mBAAOC,IAAP,CAAY,KAAKR,QAAjB,EAA2B,EAA3B,CADE;;AAAA;AACfQ,YAAAA,IADe;AAErB,iBAAKR,QAAL,GAAgBQ,IAAhB;AACAF,YAAAA,IAAI;;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA,K,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,UAAU,CAACiB,OAAX,CAAmBC,eAAnB;AAAA,4FAAqC,kBAAgBV,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BW,YAAAA,IAD6B,GACtB,IADsB;AAAA;AAAA,mBAEbJ,mBAAOK,OAAP,CAAeZ,QAAf,EAAyBW,IAAI,CAACX,QAA9B,CAFa;;AAAA;AAE7BY,YAAAA,OAF6B;AAAA,8CAG5BA,OAH4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAMC,SAAS,GAAGtB,qBAASuB,KAAT,CAAe,MAAf,EAAuBtB,UAAvB,CAAlB;;eAEeqB,S","sourcesContent":["/* eslint-disable func-names */\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst { Schema } = mongoose;\n\nconst UserSchema = new Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  username: {\n    type: String,\n    required: true, // this doesn't seem to work\n    lowercase: true,\n    trim: true,\n  },\n  resetToken: {\n    type: String,\n  },\n  resetTokenExp: {\n    type: Date,\n  },\n});\n\nUserSchema.pre('save', async function (next) {\n  const hash = await bcrypt.hash(this.password, 10);\n  this.password = hash;\n  next();\n});\n\n// this may be a bad idea because you need to create the user first i beleive to utilize this.. which defeats the purpose\n// UserSchema.methods.usernameAvailable = async function (username) {\n//   const user = await UserModel.findOne({ username: username});\n//   if (user) {\n//     return false; // name take\n//   } else {\n//     return true; // name available\n//   }\n//   // const compare = await bcrypt.compare(username, user.username);\n//   // return compare;\n// };\n\nUserSchema.methods.isValidPassword = async function (password) {\n  const user = this;\n  const compare = await bcrypt.compare(password, user.password);\n  return compare;\n};\n\nconst UserModel = mongoose.model('user', UserSchema);\n\nexport default UserModel;\n"],"file":"UserModel.js"}