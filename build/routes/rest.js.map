{"version":3,"sources":["../../src/routes/rest.js"],"names":["tokenList","router","express","Router","processLogoutRequest","req","res","cookies","refreshToken","refreshJwt","clearCookie","method","status","json","message","sendFile","root","get","cookie","post","passport","authenticate","session","next","parseInt","body","value","Error","console","log","error","user","login","err","_id","email","name","username","token","jwt","sign","process","env","JWT_SECRET","expiresIn","JWT_REFRESH_SECRET","route"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACA,IAAMA,SAAS,GAAG,EAAlB;;AAEA,IAAMC,MAAM,GAAGC,oBAAQC,MAAR,EAAf,C,CAEA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,GAAnC,EAAwC;AACtC,MAAID,GAAG,CAACE,OAAR,EAAiB;AACf,QAAMC,YAAY,GAAGH,GAAG,CAACE,OAAJ,CAAYE,UAAjC;;AACA,QAAID,YAAY,IAAIR,SAApB,EAA+B;AAC7B,aAAOA,SAAS,CAACQ,YAAD,CAAhB;AACD;;AACDF,IAAAA,GAAG,CAACI,WAAJ,CAAgB,KAAhB;AACAJ,IAAAA,GAAG,CAACI,WAAJ,CAAgB,YAAhB;AACD;;AAED,MAAIL,GAAG,CAACM,MAAJ,KAAe,MAAnB,EAA2B;AACzBL,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,YAAX;AAAyBF,MAAAA,MAAM,EAAE;AAAjC,KAArB;AACD,GAFD,MAEO,IAAIP,GAAG,CAACM,MAAJ,KAAe,KAAnB,EAA0B;AAC/BL,IAAAA,GAAG,CAACS,QAAJ,CAAa,aAAb,EAA4B;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA5B,EAD+B,CAE/B;AACD,GAHM,MAGA,CACL;AACD;AACF;;AACDf,MAAM,CAACgB,GAAP,CAAW,SAAX,EAAsB,UAACZ,GAAD,EAAMC,GAAN,EAAc;AAClCA,EAAAA,GAAG,CAACY,MAAJ,CAAW,UAAX,EAAuB,MAAvB;AACAZ,EAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,IAAAA,OAAO,EAAE,IADU;AAEnBF,IAAAA,MAAM,EAAE;AAFW,GAArB;AAID,CAND;AAQAX,MAAM,CAACkB,IAAP,CACE,SADF,EAEEC,qBAASC,YAAT,CAAsB,QAAtB,EAAgC;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAhC,CAFF;AAAA,2FAGE,iBAAOjB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACEA,YAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,sBAAX;AAAmCF,cAAAA,MAAM,EAAE;AAA3C,aAArB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAHF;;AAAA;AAAA;AAAA;AAAA;AAQAX,MAAM,CAACkB,IAAP,CAAY,UAAZ,EAAwB,UAACd,GAAD,EAAMC,GAAN,EAAWiB,IAAX,EAAoB;AAC1C,MAAIC,QAAQ,CAACnB,GAAG,CAACoB,IAAJ,CAASC,KAAV,EAAiB,EAAjB,CAAR,GAA+B,CAAnC,EAAsC;AACpCpB,IAAAA,GAAG,CAACO,IAAJ,CAASR,GAAG,CAACoB,IAAJ,CAASC,KAAT,GAAiB,CAA1B;AACD,GAFD,MAEO;AACLH,IAAAA,IAAI,CAAC,IAAII,KAAJ,CAAU,cAAV,CAAD,CAAJ,CADK,CAC4B;AAClC;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAYxB,GAAG,CAACoB,IAAhB;AACD,CARD;AAUAxB,MAAM,CAACkB,IAAP,CAAY,QAAZ;AAAA,4FAAsB,kBAAOd,GAAP,EAAYC,GAAZ,EAAiBiB,IAAjB;AAAA;AAAA;AAAA;AAAA;AACpB;AACAH,iCAASC,YAAT,CAAsB,OAAtB;AAAA,wGAA+B,kBAAOS,KAAP,EAAcC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,6BAEvBD,KAFuB;AAAA;AAAA;AAAA;;AAAA,0DAGlBP,IAAI,CAACO,KAAD,CAHc;;AAAA;AAAA,4BAKtBC,IALsB;AAAA;AAAA;AAAA;;AAAA,0DAMlBR,IAAI,CAAC,IAAII,KAAJ,CAAU,yBAAV,CAAD,CANc;;AAAA;AAQ3BtB,wBAAAA,GAAG,CAAC2B,KAAJ,CAAUD,IAAV,EAAgB;AACdT,0BAAAA,OAAO,EAAE;AADK,yBAAhB,EAEG,UAACW,GAAD,EAAS;AACV,8BAAIA,GAAJ,EAAS;AACP,mCAAOV,IAAI,CAACO,KAAD,CAAX;AACD,2BAHS,CAKV;;;AACA,8BAAML,IAAI,GAAG;AACXS,4BAAAA,GAAG,EAAEH,IAAI,CAACG,GADC;AAEXC,4BAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFD;AAGXC,4BAAAA,IAAI,EAAEL,IAAI,CAACM;AAHA,2BAAb;;AAMA,8BAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAET,4BAAAA,IAAI,EAAEN;AAAR,2BAAT,EAAyBgB,OAAO,CAACC,GAAR,CAAYC,UAArC,EAAiD;AAAEC,4BAAAA,SAAS,EAAE;AAAb,2BAAjD,CAAd;;AACA,8BAAMpC,YAAY,GAAG+B,yBAAIC,IAAJ,CAAS;AAAET,4BAAAA,IAAI,EAAEN;AAAR,2BAAT,EAAyBgB,OAAO,CAACC,GAAR,CAAYG,kBAArC,EAAyD;AAAED,4BAAAA,SAAS,EAAE;AAAb,2BAAzD,CAArB,CAbU,CAcV;;;AACAtC,0BAAAA,GAAG,CAACY,MAAJ,CAAW,KAAX,EAAkBoB,KAAlB;AACAhC,0BAAAA,GAAG,CAACY,MAAJ,CAAW,YAAX,EAAyBV,YAAzB,EAhBU,CAiBV;;AACAR,0BAAAA,SAAS,CAACQ,YAAD,CAAT,GAA0B;AACxB8B,4BAAAA,KAAK,EAALA,KADwB;AAExB9B,4BAAAA,YAAY,EAAZA,YAFwB;AAGxB2B,4BAAAA,KAAK,EAAEJ,IAAI,CAACI,KAHY;AAIxBD,4BAAAA,GAAG,EAAEH,IAAI,CAACG,GAJc;AAKxBE,4BAAAA,IAAI,EAAEL,IAAI,CAACK,IALa,CAKP;;AALO,2BAA1B,CAlBU,CA0BV;;AACA,iCAAO9B,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1ByB,4BAAAA,KAAK,EAALA,KAD0B;AAE1B9B,4BAAAA,YAAY,EAAZA,YAF0B;AAG1BI,4BAAAA,MAAM,EAAE;AAHkB,2BAArB,CAAP;AAKD,yBAlCD;AAR2B;AAAA;;AAAA;AAAA;AAAA;AA4C3BgB,wBAAAA,OAAO,CAACC,GAAR;AA5C2B,0DA6CpBN,IAAI,cA7CgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA/B;;AAAA;AAAA;AAAA;AAAA,iBA+CGlB,GA/CH,EA+CQC,GA/CR,EA+CaiB,IA/Cb;;AAFoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,K,CAoDA;;AACAtB,MAAM,CAAC6C,KAAP,CAAa,SAAb,EACG7B,GADH,CACOb,oBADP,EAEGe,IAFH,CAEQf,oBAFR;AAIAH,MAAM,CAACkB,IAAP,CAAY,QAAZ,EAAsB,UAACd,GAAD,EAAMC,GAAN,EAAc;AAAA,MAC1BE,YAD0B,GACTH,GAAG,CAACoB,IADK,CAC1BjB,YAD0B;;AAElC,MAAIA,YAAY,IAAIR,SAApB,EAA+B;AAC7B,QAAMyB,IAAI,GAAG;AACXU,MAAAA,KAAK,EAAEnC,SAAS,CAACQ,YAAD,CAAT,CAAwB2B,KADpB;AAEXD,MAAAA,GAAG,EAAElC,SAAS,CAACQ,YAAD,CAAT,CAAwB0B,GAFlB;AAGXE,MAAAA,IAAI,EAAEpC,SAAS,CAACQ,YAAD,CAAT,CAAwB4B;AAHnB,KAAb;;AAKA,QAAME,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAET,MAAAA,IAAI,EAAEN;AAAR,KAAT,EAAyBgB,OAAO,CAACC,GAAR,CAAYC,UAArC,EAAiD;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAjD,CAAd,CAN6B,CAO7B;;;AACAtC,IAAAA,GAAG,CAACY,MAAJ,CAAW,KAAX,EAAkBoB,KAAlB;AACAtC,IAAAA,SAAS,CAACQ,YAAD,CAAT,CAAwB8B,KAAxB,GAAgCA,KAAhC;AACAhC,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEyB,MAAAA,KAAK,EAALA,KAAF;AAAS1B,MAAAA,MAAM,EAAE;AAAjB,KAArB;AACD,GAXD,MAWO;AACLgB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYrB,YAAZ;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY7B,SAAZ;AAEAM,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,cAAX;AAA2BF,MAAAA,MAAM,EAAE;AAAnC,KAArB;AACD;AACF,CArBD;eAuBeX,M","sourcesContent":["import express from 'express';\nimport passport from 'passport';\nimport jwt from 'jsonwebtoken';\nimport 'dotenv/config';\n\n// this is going to be in memory tokenlist.. better to probably write this to a db\nconst tokenList = {};\n\nconst router = express.Router();\n\n// router.get('/', (req, res) => {\n//   // console.log(req);\n//   res.send('HAVE FUN STAYING POOR!');\n// });\nfunction processLogoutRequest(req, res) {\n  if (req.cookies) {\n    const refreshToken = req.cookies.refreshJwt;\n    if (refreshToken in tokenList) {\n      delete tokenList[refreshToken];\n    }\n    res.clearCookie('jwt');\n    res.clearCookie('refreshJwt');\n  }\n\n  if (req.method === 'POST') {\n    res.status(200).json({ message: 'logged out', status: 200 });\n  } else if (req.method === 'GET') {\n    res.sendFile('logout.html', { root: './public' });\n    // res.status(200).json({ message: 'logged out', status: 200 });\n  } else {\n    // throw an error\n  }\n}\nrouter.get('/status', (req, res) => {\n  res.cookie('tetsting', 'test');\n  res.status(210).json({\n    message: 'ok',\n    status: 200,\n  });\n});\n\nrouter.post(\n  '/signup',\n  passport.authenticate('signup', { session: false }),\n  async (req, res) => {\n    res.status(200).json({ message: 'signup was sucessful', status: 200 });\n  },\n);\n\nrouter.post('/compute', (req, res, next) => {\n  if (parseInt(req.body.value, 10) > 5) {\n    res.json(req.body.value * 2);\n  } else {\n    next(new Error('testing 500s')); // res.json('value too low or something wrong')\n  }\n\n  console.log(req.body);\n});\n\nrouter.post('/login', async (req, res, next) => {\n  // eslint-disable-next-line consistent-return\n  passport.authenticate('login', async (error, user) => {\n    try {\n      if (error) {\n        return next(error);\n      }\n      if (!user) {\n        return next(new Error('email password required'));\n      }\n      req.login(user, {\n        session: false,\n      }, (err) => {\n        if (err) {\n          return next(error);\n        }\n\n        // create jwt\n        const body = {\n          _id: user._id,\n          email: user.email,\n          name: user.username,\n        };\n\n        const token = jwt.sign({ user: body }, process.env.JWT_SECRET, { expiresIn: 300 });\n        const refreshToken = jwt.sign({ user: body }, process.env.JWT_REFRESH_SECRET, { expiresIn: 86400 });\n        // store token in cookie\n        res.cookie('jwt', token);\n        res.cookie('refreshJwt', refreshToken);\n        // store tokens in memory\n        tokenList[refreshToken] = {\n          token,\n          refreshToken,\n          email: user.email,\n          _id: user._id,\n          name: user.name, // username\n        };\n\n        // send token back to user\n        return res.status(200).json({\n          token,\n          refreshToken,\n          status: 200,\n        });\n      });\n    } catch (err) {\n      console.log(`error: ${err}`);\n      return next(err);\n    }\n  })(req, res, next);\n});\n\n// this will treat GET and POST the same.\nrouter.route('/logout')\n  .get(processLogoutRequest)\n  .post(processLogoutRequest);\n\nrouter.post('/token', (req, res) => {\n  const { refreshToken } = req.body;\n  if (refreshToken in tokenList) {\n    const body = {\n      email: tokenList[refreshToken].email,\n      _id: tokenList[refreshToken]._id,\n      name: tokenList[refreshToken].name,\n    };\n    const token = jwt.sign({ user: body }, process.env.JWT_SECRET, { expiresIn: 300 });\n    // update jwt\n    res.cookie('jwt', token);\n    tokenList[refreshToken].token = token;\n    res.status(200).json({ token, status: 200 });\n  } else {\n    console.log('refreshToken');\n    console.log(refreshToken);\n    console.log('tokenList');\n    console.log(tokenList);\n\n    res.status(401).json({ message: 'unauthorized', status: 401 });\n  }\n});\n\nexport default router;\n"],"file":"rest.js"}