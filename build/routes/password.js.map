{"version":3,"sources":["../../src/routes/password.js"],"names":["email","process","env","EMAIL","password","EMAIL_PASSWORD","smtpTransport","nodemailer","createTransport","service","EMAIL_PROVIDER","auth","user","pass","handlebarsOptions","viewEngine","extName","defaultLayout","partialsDir","layoutsDir","viewPath","path","resolve","use","router","express","Router","post","req","res","userEmail","body","UserModel","findOne","status","json","message","buffer","crypto","randomBytes","token","toString","findByIdAndUpdate","_id","resetToken","resetTokenExp","Date","now","emailOptions","to","from","template","subject","context","name","username","url","SERVER_URL","RESET_PORT","sendMail","console","log","$gt","verifiedPassword","undefined","save"],"mappings":"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","sourcesContent":["import express from 'express';\nimport hbs from 'nodemailer-express-handlebars';\nimport nodemailer from 'nodemailer';\nimport path from 'path';\nimport crypto from 'crypto';\nimport UserModel from '../models/UserModel';\nimport 'dotenv/config';\n\nconst email = process.env.EMAIL;\nconst password = process.env.EMAIL_PASSWORD;\nconst smtpTransport = nodemailer.createTransport({\n  service: process.env.EMAIL_PROVIDER,\n  auth: {\n    user: email,\n    pass: password,\n  },\n});\n\nconst handlebarsOptions = {\n  viewEngine: {\n    extName: '.bhs',\n    defaultLayout: null,\n    partialsDir: './src/templates/',\n    layoutsDir: './src/templates/',\n  },\n  viewPath: path.resolve('./src/templates/'),\n  extName: '.html',\n};\n\nsmtpTransport.use('compile', hbs(handlebarsOptions));\n\nconst router = express.Router();\n\nrouter.post('/forgot-password', async (req, res) => {\n  const userEmail = req.body.email;\n  const user = await UserModel.findOne({ email: userEmail });\n  if (!user) {\n    res.status(400).json({\n      message: 'invalid email', // should probably be a more generic email so people don't know what error condition they are hitting\n      status: 400,\n    });\n    return;\n  }\n\n  // create reset token for user to reset their password\n  const buffer = crypto.randomBytes(20);\n  const token = buffer.toString('hex');\n  // update user reset password token and expiration\n  await UserModel.findByIdAndUpdate(\n    { _id: user._id },\n    { resetToken: token, resetTokenExp: Date.now() + 3600000 }, // 1 hour\n\n  );\n  try {\n    // send user password reset email\n    const emailOptions = {\n      to: userEmail,\n      from: email,\n      template: 'forgot-password',\n      subject: 'Lumegume password reset',\n      // this is what will populate variables in the email\n      context: {\n        name: user.username,\n        url: `${process.env.SERVER_URL}:${process.env.RESET_PORT || 3000}/?token=${token}&scene=resetPassword`,\n      },\n    };\n    await smtpTransport.sendMail(emailOptions);\n\n    res.status(200).json({\n      message: `An email has been sent to reset your password for: ${userEmail}, reset link is only valid for 10 minutes.`,\n      status: 200,\n    });\n  } catch (err) {\n    console.log(`forgot password didn't work ${err}`);\n  }\n  // }\n});\n\nrouter.post('/reset-password', async (req, res) => {\n  const user = await UserModel.findOne({\n    resetToken: req.body.token,\n    resetTokenExp: { $gt: Date.now() }, // because im using date for this i can use gt (greater than values) ** only find token that aren't already expired\n    // email: userEmail // i believe i can comment this out without any query problems because the token will be unique. big issue if duplicate tokens.\n  });\n\n  if (!user) {\n    res.status(400).json({\n      message: 'invalid token', // should probably be a more generic email so people don't know what error condition they are hitting\n      status: 400,\n    });\n    return;\n  }\n  const userEmail = user.email;\n\n  // make sure new password is provided and matches with a check\n  if (!req.body.password || !req.body.verifiedPassword || req.body.password !== req.body.verifiedPassword) {\n    res.status(400).json({\n      message: 'passwords are not valid or do not match',\n      status: 400,\n    });\n    return;\n  }\n\n  // update user model\n  user.password = req.body.password;\n  user.resetToken = undefined;\n  user.resetTokenExp = undefined;\n  await user.save(); // because user is a model using mongoose this will update the database\n\n  // send user the update password template\n  const emailOptions = {\n    to: userEmail,\n    from: email,\n    template: 'reset-password',\n    subject: 'Lumegume password reset confirmation',\n    // this is what will populate variables in the email\n    context: {\n      name: user.username,\n    },\n  };\n  await smtpTransport.sendMail(emailOptions);\n\n  res.status(200).json({\n    message: 'password updated',\n    status: 200,\n  });\n});\n\nexport default router;\n"],"file":"password.js"}