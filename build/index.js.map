{"version":3,"sources":["../src/index.js"],"names":["require","app","server","Server","io","cors","origin","process","env","CORS_ORIGIN","methods","gameManager","GameManager","setup","console","log","PORT","port","use","bodyParser","urlencoded","extended","json","credentials","mongoose","version","uri","MONGO_CONNECTION_URL","mongoConfig","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","MONGO_USER_NAME","MONGO_PASSWORD","auth","authSource","user","pass","connect","connection","on","err","exit","express","__dirname","get","req","res","send","routes","passwordRoutes","passport","authenticate","session","secureRoutes","status","message","next","error","listen"],"mappings":"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","sourcesContent":["import express from 'express';\nimport 'dotenv/config';\n\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport mongoose from 'mongoose';\nimport passport from 'passport';\n\n// routes\nimport routes from './routes/rest';\nimport passwordRoutes from './routes/password';\nimport secureRoutes from './routes/secure';\nimport GameManager from './game_manager/GameManager';\n// require passport auth\nrequire('./auth/auth');\n\nconst app = express();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server, {\n  cors: {\n    origin: process.env.CORS_ORIGIN,\n    methods: ['GET', 'POST'],\n  },\n});\n\nconst gameManager = new GameManager(io);\ngameManager.setup();\n\nconsole.log(process.env.PORT);\nconst port = process.env.PORT || 3000;\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }));\n// parse application/json\napp.use(bodyParser.json());\napp.use(cors({\n  credentials: true,\n  origin: process.env.CORS_ORIGIN,\n}));\napp.use(cookieParser());\n\nconsole.log(mongoose.version);\n// mongo connection\nconst uri = process.env.MONGO_CONNECTION_URL;\nconsole.log(uri);\nconst mongoConfig = {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false,\n};\nif (process.env.MONGO_USER_NAME && process.env.MONGO_PASSWORD) {\n  mongoConfig.auth = { authSource: 'admin' };\n  mongoConfig.user = process.env.MONGO_USER_NAME;\n  mongoConfig.pass = process.env.MONGO_PASSWORD;\n}\nmongoose.connect(uri, mongoConfig);\n\nmongoose.connection.on('error', (err) => {\n  console.log(err);\n  process.exit(1);\n});\n\n// allow express to use files in public folder\napp.use(express.static(`${__dirname}/../public`));\n\napp.get('/', (req, res) => {\n  res.send(`${__dirname}/../index.html`);\n});\n\n// setup routes\napp.use('/', routes);\napp.use('/', passwordRoutes);\n// secure routes secured by jwt\napp.use('/', passport.authenticate('jwt', { session: false }), secureRoutes);\n\napp.get('/game.html', passport.authenticate('jwt', { session: false }), (req, res) => {\n  res.status(200).json(req.user);\n});\n\n// catch all other routes (404's)\n\napp.use((req, res) => {\n  res.status(404).json({\n    message: 'Not Found',\n    status: 404,\n  });\n});\n\n// handle errors\n\n// eslint-disable-next-line no-unused-vars\napp.use((err, req, res, next) => {\n  res.status(err.status || 599).json({\n    error: err.message,\n    status: 599,\n  });\n});\n\nmongoose.connection.on('connected', () => {\n  console.log('connected to mongo');\n\n  server.listen(port, () => {\n    console.log(`running on port ${port}`);\n  });\n});\n"],"file":"index.js"}