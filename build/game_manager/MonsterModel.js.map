{"version":3,"sources":["../../src/game_manager/MonsterModel.js"],"names":["MonsterModel","x","y","bitcoin","spawnerId","frame","health","attack","mVelocity","movementIntervalTime","id","maxHealth","damage","randomAngle","radian","Math","PI","monsterPixels","Scale","FACTOR","mapWidthScaled","Map","TileWidth","mapHeightScaled","TileHeight","randomSpeedMultiplier","newY","sin","newX","cos","console","log"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;IAEqBA,Y;AACnB,wBAAYC,CAAZ,EAAeC,CAAf,EAAkBC,OAAlB,EAA2BC,SAA3B,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,MAArD,EAA6DC,SAA7D,EAAwEC,oBAAxE,EAA8F;AAAA;AAC5F,SAAKC,EAAL,aAAaN,SAAb,cAA0B,eAA1B;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKH,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKK,SAAL,GAAiBL,MAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACD;;;;+BAEUG,M,EAAQ;AACjB,WAAKN,MAAL,IAAeM,MAAf;AACD;;;2BAEM;AACL,UAAMC,WAAW,GAAG,yBAAa,CAAb,EAAgB,GAAhB,CAApB;AACA,UAAMC,MAAM,GAAID,WAAW,GAAGE,IAAI,CAACC,EAApB,GAA0B,GAAzC;AACA,UAAMC,aAAa,GAAG,KAAK,CAAL,GAASC,aAAMC,MAArC,CAHK,CAIL;;AACA,UAAMC,cAAc,GAAIC,WAAIC,SAAJ,GAAgB,EAAhB,GAAqBJ,aAAMC,MAAnD;AACA,UAAMI,eAAe,GAAGF,WAAIG,UAAJ,GAAiB,EAAjB,GAAsBN,aAAMC,MAApD;AACA,UAAMM,qBAAqB,GAAG,yBAAa,CAAb,EAAgB,CAAhB,CAA9B;AACA,UAAIC,IAAI,GAAGX,IAAI,CAACY,GAAL,CAASb,MAAT,IAAmB,KAAKN,SAAxB,GAAoCiB,qBAA/C;AACA,UAAIG,IAAI,GAAGb,IAAI,CAACc,GAAL,CAASf,MAAT,IAAmB,KAAKN,SAAxB,GAAoCiB,qBAA/C,CATK,CAWL;;AACA,UAAI,KAAKxB,CAAL,GAAS2B,IAAT,GAAgBR,cAApB,EAAoC;AAClCQ,QAAAA,IAAI,GAAIR,cAAc,GAAG,KAAKnB,CAAvB,GAA4BgB,aAAnC;AACD,OAFD,MAEO,IAAI,KAAKhB,CAAL,GAAS2B,IAAT,GAAgB,CAApB,EAAuB;AAC5BA,QAAAA,IAAI,GAAG,KAAK3B,CAAL,GAASgB,aAAhB;AACD,OAFM,MAEA,CACL;AACD;;AACD,UAAI,KAAKf,CAAL,GAASwB,IAAT,GAAgBH,eAApB,EAAqC;AACnCG,QAAAA,IAAI,GAAIH,eAAe,GAAG,KAAKrB,CAAxB,GAA6Be,aAApC;AACD,OAFD,MAEO,IAAI,KAAKf,CAAL,GAASwB,IAAT,GAAgB,CAApB,EAAuB;AAC5BA,QAAAA,IAAI,GAAG,KAAKxB,CAAL,GAASe,aAAhB;AACD,OAFM,MAEA,CACL;AACD;;AAED,WAAKhB,CAAL,IAAU2B,IAAV;AACA,WAAK1B,CAAL,IAAUwB,IAAV,CA5BK,CA6BL;AACA;;AAEA,UAAI,KAAKzB,CAAL,GAAS,IAAT,IAAiB,KAAKC,CAAL,GAAS,IAA9B,EAAoC;AAClC4B,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,oBAAwBlB,WAAxB,mBAA4C,KAAKZ,CAAjD,uBAA+D2B,IAA/D,iBAA0E,KAAK1B,CAA/E,uBAA6FwB,IAA7F,yBAAgH,KAAKlB,SAArH;AACD,OAnCI,CAoCL;;AACD","sourcesContent":["import { v4 } from 'uuid';\nimport { randomNumber, Scale, Map } from './utils';\n\nexport default class MonsterModel {\n  constructor(x, y, bitcoin, spawnerId, frame, health, attack, mVelocity, movementIntervalTime) {\n    this.id = `${spawnerId}-${v4()}`;\n    this.spawnerId = spawnerId;\n    this.x = x;\n    this.y = y;\n    this.bitcoin = bitcoin;\n    this.frame = frame;\n    this.health = health;\n    this.maxHealth = health;\n    this.attack = attack;\n    this.mVelocity = mVelocity;\n    this.movementIntervalTime = movementIntervalTime;\n  }\n\n  loseHealth(damage) {\n    this.health -= damage;\n  }\n\n  move() {\n    const randomAngle = randomNumber(1, 360);\n    const radian = (randomAngle * Math.PI) / 180;\n    const monsterPixels = 32 * 2 * Scale.FACTOR;\n    // also take into account monster width / height in case origin of monster is top/right.\n    const mapWidthScaled = (Map.TileWidth * 32 * Scale.FACTOR);\n    const mapHeightScaled = Map.TileHeight * 32 * Scale.FACTOR;\n    const randomSpeedMultiplier = randomNumber(1, 3);\n    let newY = Math.sin(radian) * this.mVelocity * randomSpeedMultiplier;\n    let newX = Math.cos(radian) * this.mVelocity * randomSpeedMultiplier;\n\n    // check for out of bounds\n    if (this.x + newX > mapWidthScaled) {\n      newX = (mapWidthScaled - this.x) - monsterPixels;\n    } else if (this.x + newX < 0) {\n      newX = this.x + monsterPixels;\n    } else {\n      //\n    }\n    if (this.y + newY > mapHeightScaled) {\n      newY = (mapHeightScaled - this.y) - monsterPixels;\n    } else if (this.y + newY < 0) {\n      newY = this.y + monsterPixels;\n    } else {\n      //\n    }\n\n    this.x += newX;\n    this.y += newY;\n    // there is logic in each if statement to also provide if logic on whether or not the monster goes out of bounds\n    // 1 - 90 degrees\n\n    if (this.x > 3840 || this.y > 3840) {\n      console.log('monster on the run');\n      console.log(`degrees: ${randomAngle} - x: ${this.x}, (newX): ${newX} y: ${this.y}, (newY): ${newY}, distance: ${this.mVelocity}`);\n    }\n    // this.mVelocity = randomNumber(20, 312);\n  }\n}\n"],"file":"MonsterModel.js"}