{"version":3,"sources":["../../src/game_manager/GameManager.js"],"names":["GameManager","io","spawners","chests","monsters","players","playerLocations","chestLocations","monsterLocations","parseMapData","setupEventListeners","setupSpawners","levelData","layers","forEach","layer","name","objects","obj","push","x","y","properties","spawner","on","socket","console","log","id","reason","emit","spawnPlayer","broadcast","playerData","flipX","playerAttacking","currentDirection","chestId","bitcoin","updateBitcoin","spawnerId","removeObject","monsterId","attack","loseHealth","Mode","DIFFICULTY","health","updateHealth","reduceAmount","parseInt","respawn","attackedPlayerId","to","config","spawnInterval","limit","spawnerType","Object","keys","key","SpawnerType","CHEST","Spawner","addChest","bind","deleteChest","MONSTER","addMonster","deleteMonster","moveMonsters","playerId","player","PlayerModel","chest","monster"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;IACqBA,W;AACnB,uBAAYC,EAAZ,EAAgB;AAAA;AACd,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACD;;;;4BAEO;AACN,WAAKC,YAAL;AACA,WAAKC,mBAAL;AACA,WAAKC,aAAL;AACD;;;mCAEc;AAAA;;AACb,WAAKC,SAAL,GAAiBA,SAAjB;AACA,WAAKA,SAAL,CAAeC,MAAf,CAAsBC,OAAtB,CAA8B,UAACC,KAAD,EAAW;AACvC,YAAIA,KAAK,CAACC,IAAN,KAAe,kBAAnB,EAAuC;AACrCD,UAAAA,KAAK,CAACE,OAAN,CAAcH,OAAd,CAAsB,UAACI,GAAD,EAAS;AAC7B,YAAA,KAAI,CAACZ,eAAL,CAAqBa,IAArB,CAA0B,CAACD,GAAG,CAACE,CAAL,EAAQF,GAAG,CAACG,CAAZ,CAA1B;AACD,WAFD;AAGD,SAJD,MAIO,IAAIN,KAAK,CAACC,IAAN,KAAe,mBAAnB,EAAwC;AAC7CD,UAAAA,KAAK,CAACE,OAAN,CAAcH,OAAd,CAAsB,UAACI,GAAD,EAAS;AAC7B,gBAAI,KAAI,CAACV,gBAAL,CAAsBU,GAAG,CAACI,UAAJ,CAAeC,OAArC,CAAJ,EAAmD;AACjD,cAAA,KAAI,CAACf,gBAAL,CAAsBU,GAAG,CAACI,UAAJ,CAAeC,OAArC,EAA8CJ,IAA9C,CAAmD,CAACD,GAAG,CAACE,CAAL,EAAQF,GAAG,CAACG,CAAZ,CAAnD;AACD,aAFD,MAEO;AACL,cAAA,KAAI,CAACb,gBAAL,CAAsBU,GAAG,CAACI,UAAJ,CAAeC,OAArC,IAAgD,CAAC,CAACL,GAAG,CAACE,CAAL,EAAQF,GAAG,CAACG,CAAZ,CAAD,CAAhD;AACD;AACF,WAND;AAOD,SARM,MAQA,IAAIN,KAAK,CAACC,IAAN,KAAe,iBAAnB,EAAsC;AAC3CD,UAAAA,KAAK,CAACE,OAAN,CAAcH,OAAd,CAAsB,UAACI,GAAD,EAAS;AAC7B,gBAAI,KAAI,CAACX,cAAL,CAAoBW,GAAG,CAACI,UAAJ,CAAeC,OAAnC,CAAJ,EAAiD;AAC/C,cAAA,KAAI,CAAChB,cAAL,CAAoBW,GAAG,CAACI,UAAJ,CAAeC,OAAnC,EAA4CJ,IAA5C,CAAiD,CAACD,GAAG,CAACE,CAAL,EAAQF,GAAG,CAACG,CAAZ,CAAjD;AACD,aAFD,MAEO;AACL,cAAA,KAAI,CAACd,cAAL,CAAoBW,GAAG,CAACI,UAAJ,CAAeC,OAAnC,IAA8C,CAAC,CAACL,GAAG,CAACE,CAAL,EAAQF,GAAG,CAACG,CAAZ,CAAD,CAA9C;AACD;AACF,WAND;AAOD;AACF,OAtBD;AAuBD;;;0CAEqB;AAAA;;AACpB,WAAKpB,EAAL,CAAQuB,EAAR,CAAW,YAAX,EAAyB,UAACC,MAAD,EAAY;AACnC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,EAAnB;AACAH,QAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,UAACK,MAAD,EAAY;AAClC;AACA,iBAAO,MAAI,CAACxB,OAAL,CAAaoB,MAAM,CAACG,EAApB,CAAP,CAFkC,CAGlC;;AACA,UAAA,MAAI,CAAC3B,EAAL,CAAQ6B,IAAR,CAAa,kBAAb,EAAiCL,MAAM,CAACG,EAAxC,EAJkC,CAKlC;;;AACAF,UAAAA,OAAO,CAACC,GAAR,kDAAsDE,MAAtD;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,EAAnB;AACD,SARD;AAUAH,QAAAA,MAAM,CAACD,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC3B,UAAA,MAAI,CAACO,WAAL,CAAiBN,MAAM,CAACG,EAAxB,EAD2B,CAG3B;;;AACAH,UAAAA,MAAM,CAACK,IAAP,CAAY,gBAAZ,EAA8B,MAAI,CAACzB,OAAnC,EAJ2B,CAK3B;;AACAoB,UAAAA,MAAM,CAACK,IAAP,CAAY,iBAAZ,EAA+B,MAAI,CAAC1B,QAApC,EAN2B,CAO3B;;AACAqB,UAAAA,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA6B,MAAI,CAAC3B,MAAlC,EAR2B,CAS3B;;AACAsB,UAAAA,MAAM,CAACO,SAAP,CAAiBF,IAAjB,CAAsB,aAAtB,EAAqC,MAAI,CAACzB,OAAL,CAAaoB,MAAM,CAACG,EAApB,CAArC;AACD,SAXD;AAYAH,QAAAA,MAAM,CAACD,EAAP,CAAU,gBAAV,EAA4B,UAACS,UAAD,EAAgB;AAC1C,cAAI,MAAI,CAAC5B,OAAL,CAAaoB,MAAM,CAACG,EAApB,CAAJ,EAA6B;AAC3B,YAAA,MAAI,CAACvB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBR,CAAxB,GAA4Ba,UAAU,CAACb,CAAvC;AACA,YAAA,MAAI,CAACf,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBP,CAAxB,GAA4BY,UAAU,CAACZ,CAAvC;AACA,YAAA,MAAI,CAAChB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBM,KAAxB,GAAgCD,UAAU,CAACC,KAA3C;AACA,YAAA,MAAI,CAAC7B,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBO,eAAxB,GAA0CF,UAAU,CAACE,eAArD;AACA,YAAA,MAAI,CAAC9B,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBQ,gBAAxB,GAA2CH,UAAU,CAACG,gBAAtD,CAL2B,CAO3B;;AACA,YAAA,MAAI,CAACnC,EAAL,CAAQ6B,IAAR,CAAa,aAAb,EAA4B,MAAI,CAACzB,OAAL,CAAaoB,MAAM,CAACG,EAApB,CAA5B;AACD;AACF,SAXD;AAYAH,QAAAA,MAAM,CAACD,EAAP,CAAU,aAAV,EAAyB,UAACa,OAAD,EAAa;AACpC;AACA,cAAI,MAAI,CAAClC,MAAL,CAAYkC,OAAZ,CAAJ,EAA0B;AACxB;AADwB,gBAEhBC,OAFgB,GAEJ,MAAI,CAACnC,MAAL,CAAYkC,OAAZ,CAFI,CAEhBC,OAFgB,EAIxB;;AACA,YAAA,MAAI,CAACjC,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBW,aAAxB,CAAsCD,OAAtC;;AACAb,YAAAA,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA6B,MAAI,CAACzB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBU,OAArD,EANwB,CAQxB;;AACA,YAAA,MAAI,CAACpC,QAAL,CAAc,MAAI,CAACC,MAAL,CAAYkC,OAAZ,EAAqBG,SAAnC,EAA8CC,YAA9C,CAA2DJ,OAA3D;AACD;AACF,SAbD;AAcAZ,QAAAA,MAAM,CAACD,EAAP,CAAU,kBAAV,EAA8B,UAACkB,SAAD,EAAe;AAC3C;AACA;AACA;AACA,cAAI,MAAI,CAACtC,QAAL,CAAcsC,SAAd,CAAJ,EAA8B;AAAA,wCACA,MAAI,CAACtC,QAAL,CAAcsC,SAAd,CADA;AAAA,gBACpBJ,OADoB,yBACpBA,OADoB;AAAA,gBACXK,MADW,yBACXA,MADW;;AAE5B,YAAA,MAAI,CAACvC,QAAL,CAAcsC,SAAd,EAAyBE,UAAzB,CAAoC,IAAIC,YAAKC,iBAAL,CAAxC,EAF4B,CAG5B;AACA;;;AACA,gBAAI,MAAI,CAAC1C,QAAL,CAAcsC,SAAd,EAAyBK,MAAzB,IAAmC,CAAvC,EAA0C;AACxC,cAAA,MAAI,CAAC1C,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBW,aAAxB,CAAsCD,OAAtC;;AACAb,cAAAA,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA6B,MAAI,CAACzB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBU,OAArD,EAFwC,CAGxC;;AACA,cAAA,MAAI,CAACpC,QAAL,CAAc,MAAI,CAACE,QAAL,CAAcsC,SAAd,EAAyBF,SAAvC,EAAkDC,YAAlD,CAA+DC,SAA/D;;AACA,cAAA,MAAI,CAACzC,EAAL,CAAQ6B,IAAR,CAAa,gBAAb,EAA+BY,SAA/B,EALwC,CAMxC;;;AACA,cAAA,MAAI,CAACrC,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBoB,YAAxB,CAAqC,CAAC,EAAtC;;AACA,cAAA,MAAI,CAAC/C,EAAL,CAAQ6B,IAAR,CAAa,oBAAb,EAAmCL,MAAM,CAACG,EAA1C,EAA8C,MAAI,CAACvB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBmB,MAAtE;AACD,aATD,MASO;AACL,cAAA,MAAI,CAAC1C,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBoB,YAAxB,CAAqCL,MAArC,EADK,CAEL;;;AACA,cAAA,MAAI,CAAC1C,EAAL,CAAQ6B,IAAR,CAAa,oBAAb,EAAmCL,MAAM,CAACG,EAA1C,EAA8C,MAAI,CAACvB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBmB,MAAtE,EAHK,CAIL;;;AACA,cAAA,MAAI,CAAC9C,EAAL,CAAQ6B,IAAR,CAAa,qBAAb,EAAoCY,SAApC,EAA+C,MAAI,CAACtC,QAAL,CAAcsC,SAAd,EAAyBK,MAAxE,EALK,CAOL;;;AACA,kBAAI,MAAI,CAAC1C,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBmB,MAAxB,IAAkC,CAAtC,EAAyC;AACvC;AACA;AACA,oBAAME,YAAY,GAAGC,QAAQ,CAAC,CAAC,MAAI,CAAC7C,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBU,OAAzB,GAAmC,CAApC,EAAuC,EAAvC,CAA7B,CAHuC,CAIvC;;AACA,gBAAA,MAAI,CAACjC,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBW,aAAxB,CAAsCU,YAAtC;;AACAxB,gBAAAA,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA6B,MAAI,CAACzB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBU,OAArD,EANuC,CAOvC;;AACA,gBAAA,MAAI,CAACjC,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBuB,OAAxB,CAAgC,MAAI,CAAC9C,OAArC;;AACA,gBAAA,MAAI,CAACJ,EAAL,CAAQ6B,IAAR,CAAa,eAAb,EAA8B,MAAI,CAACzB,OAAL,CAAaoB,MAAM,CAACG,EAApB,CAA9B;AACD;AACF;AACF;AACF,SAvCD;AAwCAH,QAAAA,MAAM,CAACD,EAAP,CAAU,gBAAV,EAA4B,UAAC4B,gBAAD,EAAsB;AAChD,cAAI,MAAI,CAAC/C,OAAL,CAAa+C,gBAAb,CAAJ,EAAoC;AAClC;AADkC,gBAE1Bd,OAF0B,GAEd,MAAI,CAACjC,OAAL,CAAa+C,gBAAb,CAFc,CAE1Bd,OAF0B,EAGlC;;AACA,YAAA,MAAI,CAACjC,OAAL,CAAa+C,gBAAb,EAA+BJ,YAA/B,CAA4C,EAA5C,EAJkC,CAKlC;;;AACA,gBAAI,MAAI,CAAC3C,OAAL,CAAa+C,gBAAb,EAA+BL,MAA/B,IAAyC,CAA7C,EAAgD;AAC9C;AACA,cAAA,MAAI,CAAC1C,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBW,aAAxB,CAAsCD,OAAtC,EAF8C,CAG9C;;;AACA,cAAA,MAAI,CAACjC,OAAL,CAAa+C,gBAAb,EAA+BD,OAA/B,CAAuC,MAAI,CAAC9C,OAA5C;;AACA,cAAA,MAAI,CAACJ,EAAL,CAAQ6B,IAAR,CAAa,eAAb,EAA8B,MAAI,CAACzB,OAAL,CAAa+C,gBAAb,CAA9B,EAL8C,CAM9C;;;AACA3B,cAAAA,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA6B,MAAI,CAACzB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBU,OAArD,EAP8C,CAQ9C;;AACA,cAAA,MAAI,CAACjC,OAAL,CAAa+C,gBAAb,EAA+Bb,aAA/B,CAA6C,CAACD,OAA9C,EAT8C,CAU9C;;;AACA,cAAA,MAAI,CAACrC,EAAL,CAAQoD,EAAR,WAAcD,gBAAd,GAAkCtB,IAAlC,CAAuC,eAAvC,EAAwD,MAAI,CAACzB,OAAL,CAAa+C,gBAAb,EAA+Bd,OAAvF,EAX8C,CAY9C;;;AACA,cAAA,MAAI,CAACjC,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBoB,YAAxB,CAAqC,CAAC,EAAtC;;AACA,cAAA,MAAI,CAAC/C,EAAL,CAAQ6B,IAAR,CAAa,oBAAb,EAAmCL,MAAM,CAACG,EAA1C,EAA8C,MAAI,CAACvB,OAAL,CAAaoB,MAAM,CAACG,EAApB,EAAwBmB,MAAtE;AACD,aAfD,MAeO;AACL,cAAA,MAAI,CAAC9C,EAAL,CAAQ6B,IAAR,CAAa,oBAAb,EAAmCsB,gBAAnC,EAAqD,MAAI,CAAC/C,OAAL,CAAa+C,gBAAb,EAA+BL,MAApF;AACD;AACF;AACF,SA1BD;AA2BArB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,MAAM,CAACG,EAA3C;AACD,OAxHD;AAyHD;;;oCAEe;AAAA;;AACd,UAAM0B,MAAM,GAAG;AACbC,QAAAA,aAAa,EAAE,IADF;AAEbC,QAAAA,KAAK,EAAE,CAFM;AAGbC,QAAAA,WAAW,EAAE,EAHA;AAIb7B,QAAAA,EAAE,EAAE;AAJS,OAAf;AAMA,UAAIL,OAAJ;AAEAmC,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKpD,cAAjB,EAAiCO,OAAjC,CAAyC,UAAC8C,GAAD,EAAS;AAChDN,QAAAA,MAAM,CAAC1B,EAAP,mBAAqBgC,GAArB;AACAN,QAAAA,MAAM,CAACG,WAAP,GAAqBI,mBAAYC,KAAjC;AACAvC,QAAAA,OAAO,GAAG,IAAIwC,mBAAJ,CACRT,MADQ,EAER,MAAI,CAAC/C,cAAL,CAAoBqD,GAApB,CAFQ,EAGR,MAAI,CAACI,QAAL,CAAcC,IAAd,CAAmB,MAAnB,CAHQ,EAIR,MAAI,CAACC,WAAL,CAAiBD,IAAjB,CAAsB,MAAtB,CAJQ,CAAV;AAMA,QAAA,MAAI,CAAC/D,QAAL,CAAcqB,OAAO,CAACK,EAAtB,IAA4BL,OAA5B;AACD,OAVD;AAYAmC,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKnD,gBAAjB,EAAmCM,OAAnC,CAA2C,UAAC8C,GAAD,EAAS;AAClDN,QAAAA,MAAM,CAAC1B,EAAP,qBAAuBgC,GAAvB;AACAN,QAAAA,MAAM,CAACG,WAAP,GAAqBI,mBAAYM,OAAjC;AAEA5C,QAAAA,OAAO,GAAG,IAAIwC,mBAAJ,CACRT,MADQ,EAER,MAAI,CAAC9C,gBAAL,CAAsBoD,GAAtB,CAFQ,EAGR,MAAI,CAACQ,UAAL,CAAgBH,IAAhB,CAAqB,MAArB,CAHQ,EAIR,MAAI,CAACI,aAAL,CAAmBJ,IAAnB,CAAwB,MAAxB,CAJQ,EAKR,MAAI,CAACK,YAAL,CAAkBL,IAAlB,CAAuB,MAAvB,CALQ,CAAV;AAOA,QAAA,MAAI,CAAC/D,QAAL,CAAcqB,OAAO,CAACK,EAAtB,IAA4BL,OAA5B;AACD,OAZD;AAaD;;;gCAEWgD,Q,EAAU;AACpB,UAAMC,MAAM,GAAG,IAAIC,uBAAJ,CAAgBF,QAAhB,EAA0B,KAAKjE,eAA/B,EAAgD,KAAKD,OAArD,CAAf;AACA,WAAKA,OAAL,CAAakE,QAAb,IAAyBC,MAAzB;AACD;;;6BAEQnC,O,EAASqC,K,EAAO;AACvB,WAAKvE,MAAL,CAAYkC,OAAZ,IAAuBqC,KAAvB;AACA,WAAKzE,EAAL,CAAQ6B,IAAR,CAAa,cAAb,EAA6B4C,KAA7B;AACD;;;gCAEWrC,O,EAAS;AACnB,aAAO,KAAKlC,MAAL,CAAYkC,OAAZ,CAAP;AACA,WAAKpC,EAAL,CAAQ6B,IAAR,CAAa,cAAb,EAA6BO,OAA7B;AACD;;;+BAEUK,S,EAAWiC,O,EAAS;AAC7B,WAAKvE,QAAL,CAAcsC,SAAd,IAA2BiC,OAA3B;AACA,WAAK1E,EAAL,CAAQ6B,IAAR,CAAa,gBAAb,EAA+B6C,OAA/B;AACD;;;kCAEajC,S,EAAW;AACvB,aAAO,KAAKtC,QAAL,CAAcsC,SAAd,CAAP;AACA,WAAKzC,EAAL,CAAQ6B,IAAR,CAAa,gBAAb,EAA+BY,SAA/B;AACD;;;mCAEc;AACb,WAAKzC,EAAL,CAAQ6B,IAAR,CAAa,iBAAb,EAAgC,KAAK1B,QAArC;AACD","sourcesContent":["import PlayerModel from './PlayerModel';\nimport * as levelData from '../../public/assets/level/large_level.json';\nimport Spawner from './Spawner';\nimport { SpawnerType, Mode, DIFFICULTY } from './utils';\n// in charge of managing game state for player's game\nexport default class GameManager {\n  constructor(io) {\n    this.io = io;\n    this.spawners = {};\n    this.chests = {};\n    this.monsters = {};\n    this.players = {};\n    this.playerLocations = [];\n    this.chestLocations = {};\n    this.monsterLocations = {};\n  }\n\n  setup() {\n    this.parseMapData();\n    this.setupEventListeners();\n    this.setupSpawners();\n  }\n\n  parseMapData() {\n    this.levelData = levelData;\n    this.levelData.layers.forEach((layer) => {\n      if (layer.name === 'player_locations') {\n        layer.objects.forEach((obj) => {\n          this.playerLocations.push([obj.x, obj.y]);\n        });\n      } else if (layer.name === 'monster_locations') {\n        layer.objects.forEach((obj) => {\n          if (this.monsterLocations[obj.properties.spawner]) {\n            this.monsterLocations[obj.properties.spawner].push([obj.x, obj.y]);\n          } else {\n            this.monsterLocations[obj.properties.spawner] = [[obj.x, obj.y]];\n          }\n        });\n      } else if (layer.name === 'chest_locations') {\n        layer.objects.forEach((obj) => {\n          if (this.chestLocations[obj.properties.spawner]) {\n            this.chestLocations[obj.properties.spawner].push([obj.x, obj.y]);\n          } else {\n            this.chestLocations[obj.properties.spawner] = [[obj.x, obj.y]];\n          }\n        });\n      }\n    });\n  }\n\n  setupEventListeners() {\n    this.io.on('connection', (socket) => {\n      // when a player connects\n      console.log('player connected to our game');\n      console.log(socket.id);\n      socket.on('disconnect', (reason) => {\n        // delete userdata from server\n        delete this.players[socket.id];\n        // emit message to remove this player\n        this.io.emit('playerDisconnect', socket.id);\n        // when a player disconnects\n        console.log(`player disconnected from game because: ${reason}`);\n        console.log(socket.id);\n      });\n\n      socket.on('newPlayer', () => {\n        this.spawnPlayer(socket.id);\n\n        // send players to new player\n        socket.emit('currentPlayers', this.players);\n        // send monsters to new player\n        socket.emit('currentMonsters', this.monsters);\n        // send chests to new player\n        socket.emit('currentChests', this.chests);\n        // send new player to all players\n        socket.broadcast.emit('spawnPlayer', this.players[socket.id]);\n      });\n      socket.on('playerMovement', (playerData) => {\n        if (this.players[socket.id]) {\n          this.players[socket.id].x = playerData.x;\n          this.players[socket.id].y = playerData.y;\n          this.players[socket.id].flipX = playerData.flipX;\n          this.players[socket.id].playerAttacking = playerData.playerAttacking;\n          this.players[socket.id].currentDirection = playerData.currentDirection;\n\n          // emit message to all players letting them know about the updated position\n          this.io.emit('playerMoved', this.players[socket.id]);\n        }\n      });\n      socket.on('pickUpChest', (chestId) => {\n        // update spawner\n        if (this.chests[chestId]) {\n          // short hand for setting bitcoin variable from chests[chestId].bitcoin this is probably a bad idea.. just trying to learn javascript and see if this works.\n          const { bitcoin } = this.chests[chestId];\n\n          // updating player balance\n          this.players[socket.id].updateBitcoin(bitcoin);\n          socket.emit('updateBalance', this.players[socket.id].bitcoin);\n\n          // remove chest this somehow calls deleteChest event (need to verify this).\n          this.spawners[this.chests[chestId].spawnerId].removeObject(chestId);\n        }\n      });\n      socket.on('monsterAtttacked', (monsterId) => {\n        // update spawner\n        // console.log('debug: '+ Object.keys(this.players[playerId]));\n        // console.log('playerid: '+playerId);\n        if (this.monsters[monsterId]) {\n          const { bitcoin, attack } = this.monsters[monsterId];\n          this.monsters[monsterId].loseHealth(2 * Mode[DIFFICULTY]);\n          // console.log('health' + this.monsters[monsterId].health);\n          // check health remove monster if dead\n          if (this.monsters[monsterId].health <= 0) {\n            this.players[socket.id].updateBitcoin(bitcoin);\n            socket.emit('updateBalance', this.players[socket.id].bitcoin);\n            // console.log('health2' + this.monsters[monsterId].health);\n            this.spawners[this.monsters[monsterId].spawnerId].removeObject(monsterId);\n            this.io.emit('monsterRemoved', monsterId);\n            // give player some more health if they kill a monster\n            this.players[socket.id].updateHealth(-10);\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n          } else {\n            this.players[socket.id].updateHealth(attack);\n            // update player health\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n            // update monster health\n            this.io.emit('updateMonsterHealth', monsterId, this.monsters[monsterId].health);\n\n            // respawn player if he be ded\n            if (this.players[socket.id].health <= 0) {\n              // update balance to take a 50% penalty\n              // 10 represents the \"radix\" i believe this should be 10 for base 10 numbering\n              const reduceAmount = parseInt(-this.players[socket.id].bitcoin / 2, 10);\n              // console.log(reduceAmount);\n              this.players[socket.id].updateBitcoin(reduceAmount);\n              socket.emit('updateBalance', this.players[socket.id].bitcoin);\n              // respawn\n              this.players[socket.id].respawn(this.players);\n              this.io.emit('respawnPlayer', this.players[socket.id]);\n            }\n          }\n        }\n      });\n      socket.on('attackedPlayer', (attackedPlayerId) => {\n        if (this.players[attackedPlayerId]) {\n          // get balance\n          const { bitcoin } = this.players[attackedPlayerId];\n          // subtract health\n          this.players[attackedPlayerId].updateHealth(10);\n          // check health of attacked player if dead send gold to attacker\n          if (this.players[attackedPlayerId].health <= 0) {\n            // dead player loses half of the gold to attacker\n            this.players[socket.id].updateBitcoin(bitcoin);\n            // respawn attacked player\n            this.players[attackedPlayerId].respawn(this.players);\n            this.io.emit('respawnPlayer', this.players[attackedPlayerId]);\n            // send update balance message to player\n            socket.emit('updateBalance', this.players[socket.id].bitcoin);\n            // reset dead players gold\n            this.players[attackedPlayerId].updateBitcoin(-bitcoin);\n            // io.to sends to a specific socket\n            this.io.to(`${attackedPlayerId}`).emit('updateBalance', this.players[attackedPlayerId].bitcoin);\n            // add bonus health to player\n            this.players[socket.id].updateHealth(-20);\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n          } else {\n            this.io.emit('updatePlayerHealth', attackedPlayerId, this.players[attackedPlayerId].health);\n          }\n        }\n      });\n      console.log('new player connected', socket.id);\n    });\n  }\n\n  setupSpawners() {\n    const config = {\n      spawnInterval: 3000,\n      limit: 3,\n      spawnerType: '',\n      id: '',\n    };\n    let spawner;\n\n    Object.keys(this.chestLocations).forEach((key) => {\n      config.id = `chest-${key}`;\n      config.spawnerType = SpawnerType.CHEST;\n      spawner = new Spawner(\n        config,\n        this.chestLocations[key],\n        this.addChest.bind(this),\n        this.deleteChest.bind(this),\n      );\n      this.spawners[spawner.id] = spawner;\n    });\n\n    Object.keys(this.monsterLocations).forEach((key) => {\n      config.id = `monster-${key}`;\n      config.spawnerType = SpawnerType.MONSTER;\n\n      spawner = new Spawner(\n        config,\n        this.monsterLocations[key],\n        this.addMonster.bind(this),\n        this.deleteMonster.bind(this),\n        this.moveMonsters.bind(this),\n      );\n      this.spawners[spawner.id] = spawner;\n    });\n  }\n\n  spawnPlayer(playerId) {\n    const player = new PlayerModel(playerId, this.playerLocations, this.players);\n    this.players[playerId] = player;\n  }\n\n  addChest(chestId, chest) {\n    this.chests[chestId] = chest;\n    this.io.emit('chestSpawned', chest);\n  }\n\n  deleteChest(chestId) {\n    delete this.chests[chestId];\n    this.io.emit('chestRemoved', chestId);\n  }\n\n  addMonster(monsterId, monster) {\n    this.monsters[monsterId] = monster;\n    this.io.emit('monsterSpawned', monster);\n  }\n\n  deleteMonster(monsterId) {\n    delete this.monsters[monsterId];\n    this.io.emit('monsterRemoved', monsterId);\n  }\n\n  moveMonsters() {\n    this.io.emit('monsterMovement', this.monsters);\n  }\n}\n"],"file":"GameManager.js"}