{"version":3,"sources":["../../src/game_manager/PlayerModel.js"],"names":["PlayerModel","playerId","spawnLocations","players","health","maxHealth","bitcoin","id","flipX","playerAttacking","location","generateLocation","x","y","damage","Math","floor","random","length","invalidLocation","Object","keys","some","key"],"mappings":";;;;;;;;;;;;;;;AAAA;IACqBA,W;AACnB,uBAAYC,QAAZ,EAAsBC,cAAtB,EAAsCC,OAAtC,EAA+C;AAAA;AAC7C,SAAKC,MAAL,GAAc,GAAd;AACA,SAAKC,SAAL,GAAiB,GAAjB;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,EAAL,GAAUN,QAAV;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKM,KAAL,GAAa,IAAb;AACA,SAAKC,eAAL,GAAuB,KAAvB,CAP6C,CAQ7C;;AACA,QAAMC,QAAQ,GAAG,KAAKC,gBAAL,CAAsBR,OAAtB,CAAjB,CAT6C,CAU7C;;AAV6C,oDAW1BO,QAX0B;;AAW5C,SAAKE,CAXuC;AAWpC,SAAKC,CAX+B;AAY9C;;;;kCAEaP,O,EAAS;AACrB,WAAKA,OAAL,IAAgBA,OAAhB;AACD;;;iCAEYQ,M,EAAQ;AACnB,WAAKV,MAAL,IAAeU,MAAf;;AACA,UAAI,KAAKV,MAAL,GAAc,KAAKC,SAAvB,EAAkC;AAChC,aAAKD,MAAL,GAAc,KAAKC,SAAnB;AACD,OAJkB,CAKnB;;AACD;;;4BAEOF,O,EAAS;AACf,WAAKC,MAAL,GAAc,KAAKC,SAAnB;AACA,UAAMK,QAAQ,GAAG,KAAKC,gBAAL,CAAsBR,OAAtB,CAAjB;;AAFe,uDAGIO,QAHJ;;AAGd,WAAKE,CAHS;AAGN,WAAKC,CAHC;AAIhB;;;qCAEgBV,O,EAAS;AACxB,UAAMO,QAAQ,GAAG,KAAKR,cAAL,CAAoBa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKf,cAAL,CAAoBgB,MAA/C,CAApB,CAAjB;AACA,UAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYlB,OAAZ,EAAqBmB,IAArB,CAA0B,UAACC,GAAD,EAAS;AACzD,YAAIpB,OAAO,CAACoB,GAAD,CAAP,CAAaX,CAAb,KAAmBF,QAAQ,CAAC,CAAD,CAA3B,IAAkCP,OAAO,CAACoB,GAAD,CAAP,CAAaV,CAAb,KAAmBH,QAAQ,CAAC,CAAD,CAAjE,EAAsE;AACpE,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OALuB,CAAxB;;AAMA,UAAIS,eAAJ,EAAqB;AACnB,eAAO,KAAKR,gBAAL,CAAsBR,OAAtB,CAAP;AACD;;AACD,aAAOO,QAAP;AACD","sourcesContent":["// container player information like health and balance\nexport default class PlayerModel {\n  constructor(playerId, spawnLocations, players) {\n    this.health = 100;\n    this.maxHealth = 100;\n    this.bitcoin = 0;\n    this.id = playerId;\n    this.spawnLocations = spawnLocations;\n    this.flipX = true;\n    this.playerAttacking = false;\n    // this.currentDirection = ;\n    const location = this.generateLocation(players);\n    // short hand to set 2 values 1st and 2nd item of location array\n    [this.x, this.y] = location;\n  }\n\n  updateBitcoin(bitcoin) {\n    this.bitcoin += bitcoin;\n  }\n\n  updateHealth(damage) {\n    this.health -= damage;\n    if (this.health > this.maxHealth) {\n      this.health = this.maxHealth;\n    }\n    // console.log('damage was '+damage+ ', now health is '+this.health);\n  }\n\n  respawn(players) {\n    this.health = this.maxHealth;\n    const location = this.generateLocation(players);\n    [this.x, this.y] = location;\n  }\n\n  generateLocation(players) {\n    const location = this.spawnLocations[Math.floor(Math.random() * this.spawnLocations.length)];\n    const invalidLocation = Object.keys(players).some((key) => {\n      if (players[key].x === location[0] && players[key].y === location[1]) {\n        return true;\n      }\n      return false;\n    });\n    if (invalidLocation) {\n      return this.generateLocation(players);\n    }\n    return location;\n  }\n}\n"],"file":"PlayerModel.js"}